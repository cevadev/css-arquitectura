/*aplicamos estilos a todos elementos cuya clase inicie con box*/
[class^="box"] {
  margin: 3rem auto;
  background-color: orangered;
}
/*caja fija*/
.box {
  width: 300px;
  height: 300px;
}

/*caja flexible*/
.box-flexible {
  /*width 50% del contenedor padre*/
  width: 50%;
  /*height 20vh representa el 20% de la pantalla*/
  height: 20vh;
}

.box-flexible-2 {
  /*definios la maxima anchura a la que puede crecer*/
  max-width: 960px;
  min-width: 280px;

  /*definimos la maxima altura a la que puede crecer*/
  max-height: 480px;
  min-height: 280px;
}

.box-flexible-3 {
  /*la propiedades width y height tienen mayor jerarquias sobre min y max*/
  width: 300px;
  height: 300px;
  /*definios la maxima anchura a la que puede crecer*/
  max-width: 960px;
  min-width: 280px;

  /*definimos la maxima altura a la que puede crecer*/
  max-height: 480px;
  min-height: 280px;
}

.box-flexible-4 {
  /*la propiedades width y height tienen mayor jerarquias sobre min y max*/
  width: 50%;
  height: 20vh;
  /*definios la maxima anchura a la que puede crecer*/
  max-width: 960px;
  min-width: 280px;

  /*definimos la maxima altura a la que puede crecer*/
  max-height: 480px;
  min-height: 280px;
}

/*img, iframe y video responsivo*/
/*adaptamos las img al tamano del contenedor*/
img,
iframe,
video {
  max-width: 100%;
  height: auto;
}

/*tecnica antigua para hacer responsive*/
.responsive-media {
  position: relative;
  max-width: 100%;
  height: 0;
  /*Formato widescreen posee una resolucion de 16widht 9height (16:9)*/
  /*16 .... 100%
    9 ..... ?
    (9*100)/16 = 56.25*/
  padding-bottom: 56.25%;
}

/*dentro de responsive-media al elemento hijo directo aplicamos:
  position: absolute. este elemento video cuyo padre es responsive-media que posee un position relative
  por lo que se posiciona con respecto al contenedor padre que es responsive-media*/
.responsive-media > * {
  position: absolute;
  width: 100%;
  height: 100%;
}

.aspect-ratio-16-9 {
  aspect-ratio: 16 / 9;
}

.aspect-ratio-1-1 {
  aspect-ratio: 1 / 1;
}

/*definimos estilos para imprimir*/
@media print {
  @page {
    size: A5 landscape;
  }

  body {
    font-size: 10pt;
    font-family: sans-serif;
    background-color: #000;
    color: greenyellow;
  }
}

/**/
@media screen and (prefers-reduced-motion: no-preference) {
  html {
    scroll-behavior: auto;
    scroll-behavior: smooth;
  }
}

/*media query para modo dark o light*/
@media screen and (prefers-color-scheme: dark) {
  html {
    background-color: black;
    color: teal;
  }
}
@media screen and (prefers-color-scheme: light) {
  html {
    background-color: white;
    color: darkblue;
  }
}

@media screen and (prefers-color-scheme: no-preferences) {
  html {
    background-color: white;
    color: darkblue;
  }
}

/*media queries clasicas*/
/*si las media queries las empezamos con min-width entonces hay que usarlas asi en todo el sitio
  pero si empezamos con max-width entonces hay que seguir usandola en todo el sitio
  para evitar confunsiones con media queries que emplean min y max width en el sitio*/
/*cuando la minima anchura sea 480px, es decir cuando el tamano de pantalla 480 o mas (hacia arriba)
  aplica los estilos*/
/*las media queries con min-width aplican la filosofia mobile-first
  que significa que el valor que des, hacia arriba*/
@media screen and (min-width: 480px) {
  html {
    background-color: lightpink;
  }
}

/*max-width cuando la maxima anchura sea 1024 hacia abajo*/
/*las media querie con max-width sigue la filosofia desktop-first
  que significa que el valor que des, hacia abajo*/
@media screen and (max-width: 1024px) {
  html {
    background-color: lightgreen;
  }
}

@media screen and (min-width: 1200px) {
  html {
    background-color: white;
  }
}

/*aplicamos un feature query*/
@supports (grid-template-columns: subgrid) {
  html {
    background-color: black;
    color: greenyellow;
  }
}

/*aplicamos estilos cuando el navegador NO soporta un feature*/
@supports not (grid-template-columns: subgrid) {
  html {
    background-color: papayawhip;
    color: green;
  }
}

/*feature query utilizando and*/
@supports (display: grid) and (grid-template-columns: subgrid) {
  html {
    background-color: white;
    color: black;
  }
}

/*feature query utilizando or*/
@supports (display: grid) or (grid-template-columns: subgrid) {
  html {
    background-color: darkslateblue;
    color: lightseagreen;
  }
}

/*fluid design*/
.fluid-grid {
  display: grid;
  /*auto-fit -> dependiendo del # de hijos de la grid, sera el # de veces que se va a repetir
    cada una de esta columnas
    minmax -> nos da un valor maximo  un valor minimo*/
  grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
}

.fluid-item {
  border: thin solid gray;
  padding: 1rem;
}

/* @link https://utopia.fyi/type/calculator?c=320,18,1.2,1240,20,1.25,5,2,&s=0.75|0.5|0.25,1.5|2|3|4|6,s-l&g=s,l,xl,12 */

:root {
  --step--2: clamp(0.78rem, calc(0.77rem + 0.03vw), 0.8rem);
  --step--1: clamp(0.94rem, calc(0.92rem + 0.11vw), 1rem);
  --step-0: clamp(1.13rem, calc(1.08rem + 0.22vw), 1.25rem);
  --step-1: clamp(1.35rem, calc(1.28rem + 0.37vw), 1.56rem);
  --step-2: clamp(1.62rem, calc(1.5rem + 0.58vw), 1.95rem);
  --step-3: clamp(1.94rem, calc(1.77rem + 0.87vw), 2.44rem);
  --step-4: clamp(2.33rem, calc(2.08rem + 1.25vw), 3.05rem);
  --step-5: clamp(2.8rem, calc(2.45rem + 1.77vw), 3.82rem);
}

.step--2 {
  font-size: var(--step--2);
}

.step--1 {
  font-size: var(--step--1);
}

.step-0 {
  font-size: var(--step-0);
}

.step-1 {
  font-size: var(--step-1);
}

.step-2 {
  font-size: var(--step-2);
}

.step-3 {
  font-size: var(--step-3);
}

.step-4 {
  font-size: var(--step-4);
}

.step-5 {
  font-size: var(--step-5);
}

/*si para manejar el fluid design parece que hay que hacer muchas clases
  tenemos un hack para aplicar
  Done:
  14px -> el tamano de la letra mas pequeno que deseo
  18 -> tamano de la letra mas grande
  1400 -> tamano de viewport mas grande. por lo que el tamano maximo al qu texto tiene que seguir
          fluyendo es 1400
  300 -> tamano de viewport mas pequeno
  Ejemplo:
  font-size: calc(12px + (24-12)*((100vw-200px) / (1600-200)));
  */
body {
  font-size: calc(14px + (18-14) * ((100vw - 300px) / (1400-300)));
}
